CREATE DATABASE TRIGGER04

USE TRIGGER04

--1. Criar uma tabela TB_FUNCIONARIO com os seguintes atributos: MATRICULA,
--NOME, DEPARTAMENTO, SALARIO, GRATIFICACAO. A Matricula representa a chave 
--primária. SALARIO e GRATIFICACAO poderão assumir valores NULOS.
CREATE TABLE TB_FUNCIONARIO(
	MATRICULA INT NOT NULL PRIMARY KEY,
	NOME VARCHAR(30) NOT NULL,
	DEPARTAMENTO INT NOT NULL,
	SALARIO NUMERIC(10,2),
	GRATIFICACAO NUMERIC(10,2)
)

--2. Criar uma Trigger na tabela TB_FUNCIONARIO que garanta que o Salário Bruto de
--um Funcionário (SALARIO + GRATIFICACAO) não possa sofrer um aumento de mais de 30%
--Obs: O novo SALARIO e a nova GRATIFICACAO poderão assumir valores NULOS (NULL).
CREATE OR ALTER TRIGGER TG_FUNC_UPDATE
ON TB_FUNCIONARIO
AFTER UPDATE
AS
BEGIN
	DECLARE @S_BRUTO_AT NUMERIC(10,2),
			@S_BRUTO_AN NUMERIC(10,2),
			@SALARIO NUMERIC(10,2), @GRATIFICACAO NUMERIC(10,2),
			@MATRICULA INT, @PORC NUMERIC(10,2)

	DECLARE C_FUN CURSOR FOR SELECT MATRICULA, SALARIO, GRATIFICACAO FROM INSERTED
	OPEN C_FUN
	FETCH C_FUN INTO @MATRICULA,@SALARIO, @GRATIFICACAO

	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		SET @S_BRUTO_AT = ISNULL(@SALARIO,0) + ISNULL(@GRATIFICACAO,0)
		SET @S_BRUTO_AN = ISNULL((SELECT SALARIO + GRATIFICACAO FROM DELETED WHERE MATRICULA = @MATRICULA),0)
		SET @PORC = ((@S_BRUTO_AT * 100)/@S_BRUTO_AN)-100

		IF(@PORC > 30)
		BEGIN
			RAISERROR('AUMENTO DE MAIS DE 30 NAO PERMITIDO',1,1)
			ROLLBACK
			RETURN
		END

		FETCH C_FUN INTO @MATRICULA,@SALARIO, @GRATIFICACAO
	END
	CLOSE C_FUN
	DEALLOCATE C_FUN
END

INSERT INTO TB_FUNCIONARIO VALUES(1, 'JOAO', 1, 800, 500),
								(2,'MARIA', 1 , 1200, 100)

UPDATE TB_FUNCIONARIO
SET SALARIO = 1100.00, GRATIFICACAO = 590.00
WHERE MATRICULA = 1

SELECT * FROM TB_FUNCIONARIO

DELETE FROM TB_FUNCIONARIO