CREATE DATABASE TRIGGER01

use trigger01

CREATE TABLE TB_ALUNO (
    MATRICULA INT NOT NULL PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    RG INT NULL,
    ENDERECO VARCHAR(100) NULL,
    TELEFONE VARCHAR (20) NULL,
)

CREATE TABLE TB_LOG_PENDENCIAS (
  MATRICULA INT,
  NOME VARCHAR(50),
  PENDENCIA VARCHAR(200)
)

--1 Criar uma Trigger do tipo AFTER INSERT para registrar as pendências de cadastrodeAlunos para os atributos RG, TELEFONE e ENDERECO.

CREATE OR ALTER TRIGGER TG_ALUNO_INSERT
ON TB_ALUNO
AFTER INSERT
AS 
BEGIN
	DECLARE @MATRICULA INT,
			@NOME VARCHAR(50),
			@RG INT,
			@ENDERECO VARCHAR(100),
			@TELEFONE VARCHAR(20)

	DECLARE C_ALUNO CURSOR FOR SELECT MATRICULA, NOME, RG, ENDERECO, TELEFONE FROM inserted
	OPEN C_ALUNO
	FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		IF(@RG IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'RG PENDENTE')
		IF(@ENDERECO IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'ENDEREÇO PENDENTE')
		IF(@TELEFONE IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'TELEFONE PENDENTE')

		FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	END
	CLOSE C_ALUNO
	DEALLOCATE C_ALUNO
END

INSERT INTO TB_ALUNO VALUES (1, 'ANDRE', '89999', NULL, NULL)

INSERT INTO TB_ALUNO VALUES (2, 'JOAO', '9999', NULL, NULL)

INSERT INTO TB_ALUNO VALUES (3, 'PATRICIA', '89999', NULL, NULL),
                            (4, 'JOANA', '9999', NULL, NULL)


--2 Criar uma Trigger do tipo AFTER UPDATE para atualizar as pendências de
--cadastrodeAlunos. Se uma informação passou a ter valor, ela deve ser removida
--da tabeladependências. Se uma informação deixou de ter valor, ela deve ser incluída na tabeladependências

CREATE OR ALTER TRIGGER TG_ALUNO_UPDATE
ON TB_ALUNO
AFTER UPDATE
AS
BEGIN
	DECLARE @MATRICULA INT,
			@NOME VARCHAR(50),
			@RG INT,
			@ENDERECO VARCHAR(100),
			@TELEFONE VARCHAR(20)

	DECLARE C_ALUNO CURSOR FOR SELECT MATRICULA, NOME, RG, ENDERECO, TELEFONE FROM inserted
	OPEN C_ALUNO
	FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		DELETE FROM TB_LOG_PENDENCIAS WHERE MATRICULA = @MATRICULA

		IF(@RG IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'RG PENDENTE')
		IF(@ENDERECO IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'ENDEREÇO PENDENTE')
		IF(@TELEFONE IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'TELEFONE PENDENTE')

		FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	END
	CLOSE C_ALUNO
	DEALLOCATE C_ALUNO
END

INSERT INTO TB_ALUNO VALUES(1, 'JOAO',NULL,NULL,NULL)
INSERT INTO TB_ALUNO VALUES(2, 'GUSTAVO',NULL,'RUA H',NULL)
INSERT INTO TB_ALUNO VALUES(3, 'PATRICIA','123','RUA H',NULL)

UPDATE TB_ALUNO
SET RG = '123456'
WHERE MATRICULA = 1

UPDATE TB_ALUNO
SET TELEFONE = '9884848'


--3. Criar uma Trigger do tipo AFTER DELETE para atualizar as pendências de cadastrodeAlunos.
--Todas as pendências de um Aluno que foi removido do cadastro devemserremovidas.
CREATE OR ALTER TRIGGER TG_ALUNO_DELETE
ON TB_ALUNO
AFTER DELETE
AS
BEGIN
	DECLARE @MATRICULA INT,
			@NOME VARCHAR(50),
			@RG INT,
			@ENDERECO VARCHAR(100),
			@TELEFONE VARCHAR(20)

	DECLARE C_ALUNO CURSOR FOR SELECT MATRICULA, NOME, RG, ENDERECO, TELEFONE FROM deleted
	OPEN C_ALUNO
	FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	WHILE(@@FETCH_STATUS = 0)
	BEGIN
		DELETE FROM TB_LOG_PENDENCIAS WHERE MATRICULA = @MATRICULA

		/*IF(@RG IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'RG PENDENTE')
		IF(@ENDERECO IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'ENDEREÇO PENDENTE')
		IF(@TELEFONE IS NULL)
			INSERT INTO TB_LOG_PENDENCIAS VALUES(@MATRICULA, @NOME, 'TELEFONE PENDENTE')*/

		FETCH C_ALUNO INTO @MATRICULA, @NOME, @RG, @ENDERECO, @TELEFONE
	END
	CLOSE C_ALUNO
	DEALLOCATE C_ALUNO
END

DELETE FROM TB_ALUNO
WHERE MATRICULA = 1

SELECT * FROM TB_LOG_PENDENCIAS
SELECT * FROM TB_ALUNO

DELETE FROM TB_ALUNO
DELETE FROM TB_LOG_PENDENCIAS